/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.exportSymbol('proto.enum_p2p_type', null, global);
goog.exportSymbol('proto.p2p_connect', null, global);
goog.exportSymbol('proto.p2p_post_ip_request', null, global);
goog.exportSymbol('proto.p2p_post_ip_response', null, global);
goog.exportSymbol('proto.p2pconnect_request', null, global);
goog.exportSymbol('proto.p2pconnect_response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.p2p_connect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.p2p_connect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.p2p_connect.displayName = 'proto.p2p_connect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.p2p_connect.prototype.toObject = function(opt_includeInstance) {
  return proto.p2p_connect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.p2p_connect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_connect.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.p2p_connect}
 */
proto.p2p_connect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.p2p_connect;
  return proto.p2p_connect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.p2p_connect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.p2p_connect}
 */
proto.p2p_connect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.enum_p2p_type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.p2p_connect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.p2p_connect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.p2p_connect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_connect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional enum_p2p_type type = 1;
 * @return {!proto.enum_p2p_type}
 */
proto.p2p_connect.prototype.getType = function() {
  return /** @type {!proto.enum_p2p_type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.enum_p2p_type} value */
proto.p2p_connect.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.p2p_connect.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.p2p_connect.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.p2p_connect.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.p2p_connect.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.p2pconnect_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.p2pconnect_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.p2pconnect_request.displayName = 'proto.p2pconnect_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.p2pconnect_request.prototype.toObject = function(opt_includeInstance) {
  return proto.p2pconnect_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.p2pconnect_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2pconnect_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetUid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.p2pconnect_request}
 */
proto.p2pconnect_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.p2pconnect_request;
  return proto.p2pconnect_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.p2pconnect_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.p2pconnect_request}
 */
proto.p2pconnect_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.p2pconnect_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.p2pconnect_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.p2pconnect_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2pconnect_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTargetUid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.p2pconnect_request.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.p2pconnect_request.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 target_uid = 2;
 * @return {number}
 */
proto.p2pconnect_request.prototype.getTargetUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.p2pconnect_request.prototype.setTargetUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.p2pconnect_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.p2pconnect_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.p2pconnect_response.displayName = 'proto.p2pconnect_response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.p2pconnect_response.prototype.toObject = function(opt_includeInstance) {
  return proto.p2pconnect_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.p2pconnect_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2pconnect_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    isOnline: jspb.Message.getFieldWithDefault(msg, 1, false),
    isExit: jspb.Message.getFieldWithDefault(msg, 2, false),
    sponsorIpInfo: (f = msg.getSponsorIpInfo()) && base_pb.Ip_info.toObject(includeInstance, f),
    targetIpInfo: (f = msg.getTargetIpInfo()) && base_pb.Ip_info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.p2pconnect_response}
 */
proto.p2pconnect_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.p2pconnect_response;
  return proto.p2pconnect_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.p2pconnect_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.p2pconnect_response}
 */
proto.p2pconnect_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnline(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExit(value);
      break;
    case 3:
      var value = new base_pb.Ip_info;
      reader.readMessage(value,base_pb.Ip_info.deserializeBinaryFromReader);
      msg.setSponsorIpInfo(value);
      break;
    case 4:
      var value = new base_pb.Ip_info;
      reader.readMessage(value,base_pb.Ip_info.deserializeBinaryFromReader);
      msg.setTargetIpInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.p2pconnect_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.p2pconnect_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.p2pconnect_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2pconnect_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsOnline();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsExit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSponsorIpInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Ip_info.serializeBinaryToWriter
    );
  }
  f = message.getTargetIpInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Ip_info.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_online = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.p2pconnect_response.prototype.getIsOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.p2pconnect_response.prototype.setIsOnline = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool is_exit = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.p2pconnect_response.prototype.getIsExit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.p2pconnect_response.prototype.setIsExit = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Ip_info sponsor_ip_info = 3;
 * @return {?proto.Ip_info}
 */
proto.p2pconnect_response.prototype.getSponsorIpInfo = function() {
  return /** @type{?proto.Ip_info} */ (
    jspb.Message.getWrapperField(this, base_pb.Ip_info, 3));
};


/** @param {?proto.Ip_info|undefined} value */
proto.p2pconnect_response.prototype.setSponsorIpInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.p2pconnect_response.prototype.clearSponsorIpInfo = function() {
  this.setSponsorIpInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.p2pconnect_response.prototype.hasSponsorIpInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Ip_info target_ip_info = 4;
 * @return {?proto.Ip_info}
 */
proto.p2pconnect_response.prototype.getTargetIpInfo = function() {
  return /** @type{?proto.Ip_info} */ (
    jspb.Message.getWrapperField(this, base_pb.Ip_info, 4));
};


/** @param {?proto.Ip_info|undefined} value */
proto.p2pconnect_response.prototype.setTargetIpInfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.p2pconnect_response.prototype.clearTargetIpInfo = function() {
  this.setTargetIpInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.p2pconnect_response.prototype.hasTargetIpInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.p2p_post_ip_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.p2p_post_ip_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.p2p_post_ip_request.displayName = 'proto.p2p_post_ip_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.p2p_post_ip_request.prototype.toObject = function(opt_includeInstance) {
  return proto.p2p_post_ip_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.p2p_post_ip_request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_post_ip_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    sponsorUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ipInfo: (f = msg.getIpInfo()) && base_pb.Ip_info.toObject(includeInstance, f),
    isready: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.p2p_post_ip_request}
 */
proto.p2p_post_ip_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.p2p_post_ip_request;
  return proto.p2p_post_ip_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.p2p_post_ip_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.p2p_post_ip_request}
 */
proto.p2p_post_ip_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSponsorUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 3:
      var value = new base_pb.Ip_info;
      reader.readMessage(value,base_pb.Ip_info.deserializeBinaryFromReader);
      msg.setIpInfo(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsready(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.p2p_post_ip_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.p2p_post_ip_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.p2p_post_ip_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_post_ip_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSponsorUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIpInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Ip_info.serializeBinaryToWriter
    );
  }
  f = message.getIsready();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 sponsor_uid = 1;
 * @return {number}
 */
proto.p2p_post_ip_request.prototype.getSponsorUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.p2p_post_ip_request.prototype.setSponsorUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 uid = 2;
 * @return {number}
 */
proto.p2p_post_ip_request.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.p2p_post_ip_request.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Ip_info ip_info = 3;
 * @return {?proto.Ip_info}
 */
proto.p2p_post_ip_request.prototype.getIpInfo = function() {
  return /** @type{?proto.Ip_info} */ (
    jspb.Message.getWrapperField(this, base_pb.Ip_info, 3));
};


/** @param {?proto.Ip_info|undefined} value */
proto.p2p_post_ip_request.prototype.setIpInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.p2p_post_ip_request.prototype.clearIpInfo = function() {
  this.setIpInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.p2p_post_ip_request.prototype.hasIpInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isReady = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.p2p_post_ip_request.prototype.getIsready = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.p2p_post_ip_request.prototype.setIsready = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.p2p_post_ip_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.p2p_post_ip_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.p2p_post_ip_response.displayName = 'proto.p2p_post_ip_response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.p2p_post_ip_response.prototype.toObject = function(opt_includeInstance) {
  return proto.p2p_post_ip_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.p2p_post_ip_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_post_ip_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSuc: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.p2p_post_ip_response}
 */
proto.p2p_post_ip_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.p2p_post_ip_response;
  return proto.p2p_post_ip_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.p2p_post_ip_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.p2p_post_ip_response}
 */
proto.p2p_post_ip_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.p2p_post_ip_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.p2p_post_ip_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.p2p_post_ip_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.p2p_post_ip_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSuc();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_suc = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.p2p_post_ip_response.prototype.getIsSuc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.p2p_post_ip_response.prototype.setIsSuc = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.enum_p2p_type = {
  ENUM_P2P_TYPE_CONNECT_REQUEST: 0,
  ENUM_P2P_TYPE_POST_IP: 2
};

goog.object.extend(exports, proto);
